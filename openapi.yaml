"openapi: 3.0.3"

info:
  title: Shruti API Server
  description: A RESTful API server built with Express.js for managing users, products, orders, and categories
  version: 1.0.0
  contact:
    name: API Support
    email: support@shruti-api.com

servers:
  - url: http://localhost:5000
    description: Development server
  - url: https://api.shruti-server.com
    description: Production server

paths:
  /:
    get:
      summary: Root endpoint
      description: Welcome message and API overview
      responses:
        '200':
          description: API information
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  endpoints:
                    type: object
                    properties:
                      health:
                        type: string
                      users:
                        type: string
                      products:
                        type: string
                      orders:
                        type: string
                      categories:
                        type: string
                  documentation:
                    type: string

  /api/health:
    get:
      summary: Health check
      description: Check if the API server and database are running
      responses:
        '200':
          description: Server health status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [OK, ERROR]
                  message:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
                  database:
                    type: string
                    enum: [Connected, Disconnected]
                  error:
                    type: string

  /api/docs:
    get:
      summary: API Documentation
      description: Get API documentation and available endpoints
      responses:
        '200':
          description: API documentation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  endpoints:
                    type: object
                    properties:
                      users:
                        type: string
                      products:
                        type: string
                      orders:
                        type: string
                      categories:
                        type: string
                      health:
                        type: string

  /api/users:
    get:
      summary: Get all users
      description: Retrieve a list of all users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      description: Create a new user with the provided information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
              properties:
                name:
                  type: string
                  description: User's full name
                email:
                  type: string
                  format: email
                  description: User's email address
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input data

  /api/users/{id}:
    get:
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      summary: Update user
      description: Update an existing user's information
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: User's full name
                email:
                  type: string
                  format: email
                  description: User's email address
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    delete:
      summary: Delete user
      description: Delete a user by their ID
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

  /api/products:
    get:
      summary: Get all products
      description: Retrieve a list of all products
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Create a new product
      description: Create a new product with the provided information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - price
              properties:
                name:
                  type: string
                  description: Product name
                price:
                  type: number
                  minimum: 0
                  description: Product price
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input data

  /api/products/{id}:
    get:
      summary: Get product by ID
      description: Retrieve a specific product by its ID
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: integer
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    put:
      summary: Update product
      description: Update an existing product's information
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Product name
                price:
                  type: number
                  minimum: 0
                  description: Product price
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    delete:
      summary: Delete product
      description: Delete a product by its ID
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: integer
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found

  /api/orders:
    get:
      summary: Get all orders
      description: Retrieve a list of all orders
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      summary: Create a new order
      description: Create a new order with the provided information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - productId
                - quantity
              properties:
                userId:
                  type: integer
                  description: ID of the user placing the order
                productId:
                  type: integer
                  description: ID of the product being ordered
                quantity:
                  type: integer
                  minimum: 1
                  description: Quantity of the product
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input data

  /api/orders/{id}:
    get:
      summary: Get order by ID
      description: Retrieve a specific order by its ID
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: integer
      responses:
        '200':
          description: Order found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
    put:
      summary: Update order
      description: Update an existing order's information
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  description: ID of the user placing the order
                productId:
                  type: integer
                  description: ID of the product being ordered
                quantity:
                  type: integer
                  minimum: 1
                  description: Quantity of the product
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
    delete:
      summary: Delete order
      description: Delete an order by its ID
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: integer
      responses:
        '200':
          description: Order deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found

  /api/categories:
    get:
      summary: Get all categories
      description: Retrieve a list of all categories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      summary: Create a new category
      description: Create a new category with the provided information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: Category name
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid input data

  /api/categories/{id}:
    get:
      summary: Get category by ID
      description: Retrieve a specific category by its ID
      parameters:
        - name: id
          in: path
          required: true
          description: Category ID
          schema:
            type: integer
      responses:
        '200':
          description: Category found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
    put:
      summary: Update category
      description: Update an existing category's information
      parameters:
        - name: id
          in: path
          required: true
          description: Category ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Category name
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
    delete:
      summary: Delete category
      description: Delete a category by its ID
      parameters:
        - name: id
          in: path
          required: true
          description: Category ID
          schema:
            type: integer
      responses:
        '200':
          description: Category deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the user
        name:
          type: string
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
      required:
        - id
        - name
        - email

    Product:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the product
        name:
          type: string
          description: Product name
        price:
          type: number
          minimum: 0
          description: Product price
      required:
        - id
        - name
        - price

    Order:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the order
        userId:
          type: integer
          description: ID of the user who placed the order
        productId:
          type: integer
          description: ID of the product being ordered
        quantity:
          type: integer
          minimum: 1
          description: Quantity of the product
      required:
        - id
        - userId
        - productId
        - quantity

    Category:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the category
        name:
          type: string
          description: Category name
      required:
        - id
        - name

  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Resource not found"

    BadRequest:
      description: Invalid input data
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid input data"

    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Something went wrong!"
              message:
                type: string 
